<%
  periods = {
    "last_hour" => {
      title: "Last Hour",
      interval: "1 HOUR",
      time_format: "%H:%M",
      sql: <<-SQL,
        SELECT host, created_at, latency FROM ping_stats
        WHERE created_at BETWEEN UTC_TIMESTAMP() - INTERVAL 1 HOUR AND UTC_TIMESTAMP()
      SQL
    },
    "last_day" => {
      title: "Last Day",
      interval: "1 DAY",
      time_format: "%H:%M",
      sql: <<-SQL,
        SELECT host, created_at, latency_sum / latency_samples FROM aggregated_stats_5_min
        WHERE created_at BETWEEN UTC_TIMESTAMP() - INTERVAL 1 DAY AND UTC_TIMESTAMP()
      SQL
    },
    # uncomment when we have a week's worth of data:
    #
    # "last_week" => {
    #   title: "Last Week",
    #   interval: "1 WEEK",
    #   time_format: "%a %H:%M",
    #   aggregate: 28 * 60,
    # },
  }

  current_period = periods[request.params["period"]] || periods["last_hour"]

  query = current_period[:sql].gsub(/^\s+/, "")

  if request.params["hosts"]
    hosts = request.params["hosts"].split(",")
    query << "AND host IN (" << hosts.map { |host| "'#{$db.escape(host.to_s)}'" }.join(", ") << ")\n"
  end

  before_query = Time.now.to_f
  results = $db.query(query, :as => :array)
  after_query = Time.now.to_f
  query_ms = ((after_query - before_query) * 1000).floor
%>
<!DOCTYPE html>
<html>
<head>
  <title>net-metrics</title>
  <script src="//cdnjs.cloudflare.com/ajax/libs/d3/3.4.1/d3.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/nvd3/1.1.14-beta/nv.d3.min.js"></script>
  <link href="//cdnjs.cloudflare.com/ajax/libs/nvd3/1.1.14-beta/nv.d3.css" rel="stylesheet" />
  <style>
    body {
      font-family:"Trebuchet MS", sans-serif;
    }
    #chart svg {
      height:600px;
    }
    .periods {
      height:24px;
      display:block;
      list-style:none;
    }
    .periods li {
      display:block;
      float:left;
      height:24px;
      width:100px;
      margin-right:12px;
    }
    .periods li a {
      display:block;
      border:1px solid #ababab;
      width:98px;
      height:22px;
      line-height:22px;
      text-align:center;
      font-size:14px;
      color:#666666;
      text-decoration:none;
    }
    .periods li a:hover, .periods li.selected a {
      border-color:#000000;
      background-color:#666666;
      color:#ffffff;
    }
  </style>
</head>
<body>
  <ul class="periods">
    <% periods.each do |period_key, period| %>
      <li class="<%= period == current_period ? "selected" : "" %>">
        <a href="?period=<%= period_key %>"><%= period[:title] %></a>
      </li>
    <% end %>
  </ul>

  <div id="chart"><svg></svg></div>

  <hr />

  Query time: <%= query_ms %> ms

  <pre><%= query %></pre>
</body>
<script>
(function() {
  var rawData = (<%= results.to_a.to_json %>).map(function(row) {
    return { host: row[0], timestamp: +new Date(row[1]), latency: row[2] };
  });

  var maxLatency = Math.max.apply(Math, rawData.map(function(row) {
    return row.latency;
  }));

  var maxTimestamp = Math.max.apply(Math, rawData.map(function(row) {
    return row.timestamp;
  }));

  var minTimestamp = Math.min.apply(Math, rawData.map(function(row) {
    return row.timestamp;
  }));

  var hosts = {};

  rawData.forEach(function(row) {
    var series = hosts[row.host];
    if(!series) {
      series = hosts[row.host] = [];
    }

    series.push({ x: row.timestamp, y: row.latency });
  });

  var d3data = Object.keys(hosts).map(function(host) {
    return { key: host, values: hosts[host] };
  });

  nv.addGraph(function() {
    var chart =
      nv.models.lineChart()
        .margin({ left: 100 })
        .useInteractiveGuideline(true)
        .transitionDuration(350)
        .showLegend(true)
        .showYAxis(true)
        .showXAxis(true);

    var timeFormat = d3.time.format("<%= current_period[:time_format] %>");

    chart.xAxis
      .axisLabel("Date/Time")
      .tickFormat(function(d) {
        return timeFormat(new Date(d));
      });

    chart.yAxis
      .axisLabel("Latency (ms)")
      .tickFormat(d3.format(".02f"));

    chart.forceY([0, maxLatency]);

    d3.select("#chart svg").datum(d3data).call(chart);

    nv.utils.windowResize(function() { chart.update() });
  });
})();
</script>
</html>
